name: Deployment Validation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Generate Prisma client
      run: pnpm db:generate
      
    - name: TypeScript check
      run: pnpm type-check
      
    - name: Lint check
      run: pnpm lint
      
    - name: Run tests
      run: pnpm test
      
    - name: Build production
      run: pnpm build
      
    - name: Start services
      run: |
        docker-compose up -d
        sleep 10
        
    - name: Run migrations
      run: pnpm migrate
      
    - name: Seed database
      run: pnpm seed
      
    - name: Start API server
      run: |
        pnpm dev:api &
        sleep 15
        
    - name: Test health check
      run: |
        curl -f http://localhost:3000/api/health || exit 1
        response=$(curl -s http://localhost:3000/api/health)
        echo "$response" | jq . || exit 1
        
    - name: Test JSON serialization
      run: |
        # Test health endpoint
        curl -s http://localhost:3000/api/health | jq . > /dev/null || exit 1
        
        # Test metrics endpoint
        curl -s "http://localhost:3000/api/metrics?project=demo" | jq . > /dev/null || exit 1
        
        # Test admin dashboard
        curl -s "http://localhost:3000/api/admin/dashboard?project=demo" | jq . > /dev/null || exit 1
        
    - name: Test API endpoints
      run: |
        endpoints=(
          "http://localhost:3000/api/health"
          "http://localhost:3000/api/metrics?project=demo"
          "http://localhost:3000/api/admin/dashboard?project=demo"
          "http://localhost:3000/api/v1/price-changes?project=demo"
          "http://localhost:3000/api/v1/catalog?project=demo"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint"
          curl -f "$endpoint" || exit 1
        done
        
    - name: Test Docker build
      run: |
        docker build -f apps/api/Dockerfile -t calibrate-test .
        
    - name: Test Docker run
      run: |
        docker run -d -p 8080:8080 -e DATABASE_URL=postgresql://test:test@localhost:5432/test calibrate-test
        sleep 10
        curl -f http://localhost:8080/api/health || exit 1
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down
        docker stop $(docker ps -q) || true
